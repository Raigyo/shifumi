{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PlayerCard","_ref","style","backgroundColor","color","backgroundImage","symbol","react_default","a","createElement","className","PlayerSprite","_ref2","character","animation","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playerChoice","move","setState","playerRed","symbols","playerBlue","Math","floor","random","nextFight","runNextRound","preState","round","playerRedDisplay","playerBlueDisplay","resultDisplay","winner","nextMove","buttonsChoice","nextRound","animationPlayerOne","animationPlayerTwo","healthRyu","healthChun","decideWinner","_this$state","state","scoreRed","scoreBlue","runGame","counter","myInterval","setInterval","clearInterval","bind","assertThisInitialized","buttonNextDisplay","buttonsChoiceDisplay","buttonNextRound","_this2","onClick","id","alt","type","src","value","concat","max","App_PlayerSprite","App_PlayerCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.688cf520.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\n/* const with that displays the move of the player */\n\nconst PlayerCard =({color, symbol})=> {\n  const style ={\n    backgroundColor: color,\n    backgroundImage: \"url(./img/\" + symbol + \".png)\"\n  }\n  return(\n    <div style = {style} className=\"player-card\">\n      {/*{symbol}*/}\n    </div>\n  )\n}\n\n/* const that displays the characters animations */\n\nconst PlayerSprite =({character, animation})=> {\n  const style ={\n    //backgroundColor: color,\n    backgroundImage: \"url(./img/\" + character + \".png)\"\n  }\n  return(\n      <div style = {style} className = {animation}>\n      {/*{symbol}*/}\n      </div>\n  )\n}\n\n/* constructor with all the states of the game */\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.playerChoice = this.playerChoice.bind(this)\n    this.symbols = [\"rock\", \"paper\", \"scissors\", \"lizard\", \"spock\"]\n    this.state = {\n      playerRedDisplay: this.symbols[0],\n      playerBlueDisplay: this.symbols[0],\n      round: 1,\n      scoreRed: 0,\n      scoreBlue: 0,\n      resultDisplay: \"\",\n      nextMove: false,\n      nextFight: false,\n      buttonsChoice: true,\n      nextRound: false,\n      animationPlayerOne: \"p1-idle\",\n      animationPlayerTwo: \"p2-idle\",\n      healthRyu: 100,\n      healthChun: 100,\n    }\n  }\n\n  /* function to make a move*/\n\n  playerChoice = (move) => {\n        this.setState({\n          playerRed: this.symbols[move],\n          playerBlue: this.symbols[Math.floor(Math.random()*5)],\n          nextFight: true,\n        })\n  }\n\n/* function to launch the next round */\n\n  runNextRound = () => {\n        this.setState((preState) => {return {round : preState.round + 1}});\n        this.setState({\n          playerRedDisplay: this.symbols[0],\n          playerBlueDisplay: this.symbols[0],\n          resultDisplay: \"\",\n          winner: \"\",\n          nextMove: false,\n          nextFight: false,\n          buttonsChoice: true,\n          nextRound: false,\n          animationPlayerOne: \"p1-idle\",\n          animationPlayerTwo: \"p2-idle\",\n          healthRyu: 100,\n          healthChun: 100,\n        })\n  }\n\n  /* function to decide winner + if the round is finished */\n\n  decideWinner = () => {\n    const {playerBlue, playerRed} = this.state\n    this.setState({\n      playerRedDisplay: this.state.playerRed,\n      playerBlueDisplay: this.state.playerBlue,\n      resultDisplay: this.state.playerRed + \" versus \" + this.state.playerBlue + \" : \",\n      nextFight: false,\n      nextMove: true,\n      buttonsChoice: false,\n      nextRound: false,\n    })\n    if (playerRed === playerBlue){\n      return \" It's a draw !\"\n    }\n    if (\n          (playerRed===\"scissors\" && playerBlue ===\"paper\")||\n          (playerRed===\"paper\" && playerBlue ===\"rock\")||\n          (playerRed===\"rock\" && playerBlue ===\"lizard\")||\n          (playerRed===\"lizard\" && playerBlue ===\"spock\")||\n          (playerRed===\"spock\" && playerBlue ===\"scissors\")||\n          (playerRed===\"scissors\" && playerBlue ===\"lizard\")||\n          (playerRed===\"lizard\" && playerBlue ===\"paper\")||\n          (playerRed===\"paper\" && playerBlue ===\"spock\")||\n          (playerRed===\"spock\" && playerBlue ===\"rock\")||\n          (playerRed===\"rock\" && playerBlue ===\"scissors\")\n        )\n        {\n          if (this.state.healthChun !== 20){\n            this.setState((preState) => {return {scoreRed : preState.scoreRed + 1, healthChun : preState.healthChun -20, animationPlayerOne: \"p1-won\", animationPlayerTwo: \"p2-lost\"}});\n            return \" Ryu strikes ! \"\n          }\n          if (this.state.healthChun === 20){\n            this.setState((preState) => {return {scoreRed : preState.scoreRed + 1, healthChun : preState.healthChun -20, nextMove: false, nextFight: false, nextRound: true, animationPlayerOne: \"p1-wonRound\", animationPlayerTwo: \"p2-looseRound\"}});\n            return \" Ryu wins ! \"\n          }\n        }\n    if (this.state.healthRyu !== 20){\n      this.setState((preState) => {return {scoreBlue : preState.scoreBlue + 1, healthRyu : preState.healthRyu -20, animationPlayerTwo: \"p2-won\", animationPlayerOne: \"p1-lost\"}});\n      return \" Chun-li strikes !\"\n    }\n    if (this.state.healthRyu === 20){\n      this.setState((preState) => {return {scoreBlue : preState.scoreBlue + 1, healthRyu : preState.healthRyu -20, nextMove: false, nextFight: false, nextRound: true, animationPlayerOne: \"p1-looseRound\", animationPlayerTwo: \"p2-wonRound\"}});\n      return \" Chun-li wins !\"\n    }\n  }\n\n  /* function to launch a game */\n\n  runGame = () => {\n    let counter =0\n    this.setState({nextFight: false, buttonsChoice: false})\n    let myInterval = setInterval(() => {\n      counter++\n\n      if(counter > 10){\n        clearInterval(myInterval)\n        this.setState({winner: this.decideWinner()})\n      }\n    },100)\n  }\n\n  /* function that reset some states after a move */\n\n  nextMove = () => {\n    //this.setState((preState) => {return {round : preState.round + 1}});\n    this.setState({\n      playerRedDisplay: this.symbols[0],\n      playerBlueDisplay: this.symbols[0],\n      nextFight: false,\n      nextMove: false,\n      buttonsChoice: true,\n      resultDisplay: \"\",\n      winner: \"\",\n      animationPlayerOne: \"p1-idle\",\n      animationPlayerTwo: \"p2-idle\",\n    })\n  }\n\n  render(){\n    const nextMove = this.state.nextMove;\n    const nextFight = this.state.nextFight;\n    const nextRound = this.state.nextRound;\n    const buttonsChoice = this.state.buttonsChoice;\n    let buttonNextDisplay;\n    let buttonsChoiceDisplay;\n    let buttonNextRound;\n    if (nextMove) {\n      buttonNextDisplay = <div className=\"hud\"><button onClick={this.nextMove}>NEXT MOVE</button></div>\n    }\n    if (nextFight) {\n      buttonNextDisplay =  <div className=\"hud\"><button onClick={this.runGame}>FIGHT!</button></div>\n    }\n    if (buttonsChoice) {\n      buttonsChoiceDisplay =\n      <div className=\"buttonsGroup\" id=\"buttonsGroup\">\n          <div className=\"hud\">Choose your weapon:</div>\n          <input className = \"buttonsPlay\" alt = \"button rock\" onClick={() => this.playerChoice(0)} type = \"image\" src = \"./img/rock.png\" />\n          <input className = \"buttonsPlay\" alt = \"button paper\" onClick={() => this.playerChoice(1)} type = \"image\" src = \"./img/paper.png\" />\n          <input className = \"buttonsPlay\" alt = \"button scissors\" onClick={() => this.playerChoice(2)} type = \"image\" src = \"./img/scissors.png\" />\n          <input className = \"buttonsPlay\" alt = \"button lizard\" onClick={() => this.playerChoice(3)} type = \"image\" src = \"./img/lizard.png\" />\n          <input className = \"buttonsPlay\" alt = \"button spock\" onClick={() => this.playerChoice(4)} type = \"image\" src = \"./img/spock.png\" />\n    </div>\n    }\n    if (nextRound) {\n      buttonNextRound =\n        <div className=\"hud\">\n          <button onClick={this.runNextRound}>PLAY NEXT ROUND</button>\n        </div>\n      }\n    return (\n\n    <div id=\"conteneur-flexbox\">\n      <div className=\"title\" id=\"title\"><img src=\"img/socket-fighter.png\" alt=\"\"/></div>\n      <div className=\"hud\" id=\"player-1\">\n        <div>RYU: {this.state.scoreRed}</div>\n        <div><progress id=\"health-ryu\" className=\"health\" value={`${this.state.healthRyu}`} max=\"100\"></progress></div>\n          <PlayerSprite\n          character=\"ryu\"\n          animation={this.state.animationPlayerOne}\n          />\n      </div>{/*\\div player-1*/}\n      <div className=\"App\" id=\"App\">\n        <div className=\"hud\">ROUND: {this.state.round} </div>\n        <div id=\"cards\" className=\"cards\">\n            <PlayerCard\n            color=\"red\"\n            symbol={this.state.playerRedDisplay}\n            />\n            <PlayerCard\n            color=\"blue\"\n            symbol={this.state.playerBlueDisplay}\n            />\n        </div>\n        <div className=\"versus\"><img src=\"img/versus.png\" alt=\"\"/></div>\n        <div className=\"hud\">{/*this.state.resultDisplay*/} {this.state.winner}</div>\n        {buttonsChoiceDisplay}\n        {buttonNextDisplay}\n        {buttonNextRound}\n      </div>{/*\\div app*/}\n      <div className=\"hud\" id=\"player-2\">\n        <div>CHUN-LI: {this.state.scoreBlue}</div>\n        <div><progress id=\"health-chun\" className=\"health\" value={`${this.state.healthChun}`} max=\"100\"></progress></div>\n        <PlayerSprite\n        character=\"chun-li\"\n        animation={this.state.animationPlayerTwo}\n        />\n      </div>{/*\\div player-2*/}\n    </div>//\\conteneur-flexbox\n      );\n  }//\\render\n}//\\class App\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}